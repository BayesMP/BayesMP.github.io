obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
while(1){	gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
}
gammaUpdateList
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
gammaUpdateList
gammaUpdateList
gammaUpdateList
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
gammaUpdateList
obj$MHcount
obj$MHcount
#### Step 1. Update Y
update.y <- function(X, f, pi, log = FALSE) {
K <- ncol(X)
G <- nrow(X)
M <- length(f)
lik <- lapply(1:M, function(m) sapply(1:K, function(k) f[[m]][[k]](X[, k])))
if(log) {
post1 <- lapply(1:M, function(m) lik[[m]] + log(pi[, m]))
const1 <- do.call(pmax, post1)
post2 <- lapply(post1, function(x) exp(x - const1))
const2 <- Reduce("+", post2)
post <- lapply(post2, function(x) x/const2)
} else {
post1 <- lapply(1:M, function(m) lik[[m]] * pi[, m])
const1 <- Reduce("+", post1)
post <- lapply(post1, function(x) x/const1)
}
postv <- sapply(post, as.vector)
Y <- matrix(rMultinom(postv), nrow = G, ncol = K)  ## 1 = 0, 2 = +1, 3 = -1
return(Y)
}
#### Step 2. Update pi
update.pi <- function(Y, gamma, M = 3, beta = 1/2) {
G <- nrow(Y)
K <- ncol(Y)
Y2 <- rowSums(Y == 2)
if(M == 3) Y3 <- rowSums(Y == 3) else Y3 = 0
piall <- rbeta(G, gamma + Y2 + Y3, 1 + K - Y2 -Y3)
if(M == 3) {
delta <- rbeta(G, beta + Y2, beta + Y3)
pi <- cbind(1 - piall, piall * delta, piall * (1 - delta))
} else {
pi <- cbind(1 - piall, piall)
}
return(pi)
}
#### Step 3. Update f (optional)
update.fnorm.one <- function(f, xx, yy, m, log = FALSE, a = -Inf, b = Inf) {
mu.old <- attr(f, "mu")
var.old <- attr(f, "var")
ny <- sum(yy == m)
Xbar <- mean(xx[yy == m])
mu <- rtruncnorm(1, a = a, b = b, mean = Xbar, sd = sqrt(var.old/ny))
SS <- sum((xx[yy == m] - mu)^2)
var <- rinvgamma(1, ny/2, SS/2)
fout <- function(x) dnorm(x, mu, sqrt(var), log = log)
attr(fout, "mu") <- mu
attr(fout, "var") <- var
return(fout)
}
update.f <- function(f, X, Y, log = FALSE) {
M <- length(f)
K <- ncol(X)
a <- c(0, -Inf)
b <- c(Inf, 0)
for(m in 2:M) {
for(k in 1:K) {
if (M == 3) {
f[[m]][[k]] <- update.fnorm.one(f[[m]][[k]], X[, k], Y[, k], m, log, a[m - 1], b[m - 1])
} else {
f[[m]][[k]] <- update.fnorm.one(f[[m]][[k]], X[, k], Y[, k], m, log)
}
}
}
return(f)
}
#### Step 4. Update gamma (optional)
update.gamma <- function(piDE, preGamma, MHsd){
aprop = rnorm(1,preGamma,MHsd);
if(aprop <= 0 | aprop >= 1){
gamma <- preGamma;
MHsd <- MHsd / 1.01;
MHcount <- 0;
} else if(runif(1) < exp(loglikelihood(aprop, piDE) - loglikelihood(preGamma, piDE))){
gamma <- aprop;
MHcount <- 1;
MHsd <- MHsd * 1.01;
} else {
gamma <- preGamma;
MHsd <- MHsd / 1.01;
MHcount <- 0;
}
return(list(gamma=gamma, MHsd=MHsd, MHcount=MHcount))
}
loglikelihood <- function(gamma, piDE){
sum(dbeta(piDE,gamma,1-gamma, log=T))
}
#### One iteration
iterate.one <- function(obj, X) {
M <- length(obj$f)
obj$Y <- update.y(X, obj$f, obj$pi, log = obj$log)
obj$pi <- update.pi(obj$Y, obj$gamma, M, obj$beta)
if(obj$update.f) obj$f <- update.f(obj$f, X, obj$Y, obj$log)
if(obj$update.gamma){
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
}
return(obj)
}
i
i=1
print(i)
obj <- iterate.one(obj, Z)
M <- length(obj$f)
obj
updateGamma
updateGamma <- TRUE
obj <- list(Y = NULL, pi = matrix(1/3, G, 3), f = f, gamma = gamma, beta = beta, log = FALSE, update.f = TRUE, update.gamma=updateGamma)
if(updateGamma){
obj$MHsd <- 0.1
obj$MHcount <- 0;
}
print(i)
obj <- iterate.one(obj, Z)
obj
M <- length(obj$f)
obj$Y <- update.y(X, obj$f, obj$pi, log = obj$log)
obj$pi <- update.pi(obj$Y, obj$gamma, M, obj$beta)
if(obj$update.f) obj$f <- update.f(obj$f, X, obj$Y, obj$log)
if(obj$update.gamma){
gammaUpdateList <- update.gamma(piDE=1 - obj$pi[,1], preGamma=obj$gamma , MHsd = obj$MHsd)
obj$gamma <- gammaUpdateList$gamma
obj$MHsd <- gammaUpdateList$MHsd
obj$MHcount <- obj$MHcount + gammaUpdateList$MHcount
}
setwd("Desktop/")
library(BayesMP)
set.seed(15213)
G <- 2000
S <- 4
alpha <- 200
X0 <- matrix(rnorm(G * S), G, S)
Xplus <- matrix(rnorm(G * S, 2), G, S)
Xminus <- matrix(rnorm(G * S, -2), G, S)
piall <- rbeta(G, alpha/G, 1)
delta <- rbeta(G, 1/2, 1/2)
p0 <- 1 - piall
p1 <- piall * delta
p2 <- piall * (1 - delta)
Y <- replicate(S, apply(cbind(p0, p1, p2),1,function(x) sample(c(0,1,-1),1,prob = x)))
Z <- X0 * (Y == 0) + Xplus * (Y == 1) + Xminus * (Y == -1)
niter=200
burnin=50
system.time(BayesMP_EB(Z,niter=niter, burnin=burnin, writeY=T, writeHSall=T))
HSallRes <- read.table('BayesMP_EB_HSall.txt')
## Bayesian inference.
## pos=1: HSb. pos=S: HSa. pos=r (1<r<S): HSr.
HSb_belief <- HSallRes[,1]/(niter - burnin)
HSb_qvalue <- BayesianFDR(HSb_belief)
sum(HSb_qvalue<0.05)
## MetaPattern
fileNameFull <- 'BayesMP_EB_Y.txt'
con  <- file(fileNameFull, open = "r")
resYplus <- matrix(0,G,S)
resYminus <- matrix(0,G,S)
i = 1
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
if(i>burnin){
print(i)
seven = strsplit(oneLine, "\t")[[1]]
thisY <- matrix(as.numeric(seven),G,S)
## for individual studies
resYplus[thisY>0] <- resYplus[thisY>0] + 1
resYminus[thisY<0] <- resYminus[thisY<0] + 1
}
i = i + 1
}
close(con)
resYplus_DE <- resYplus[HSb_qvalue<0.05,]
resYminus_DE <- resYminus[HSb_qvalue<0.05,]
## tight clustering
dissimilarity <- distance(resYplus_DE, resYminus_DE, niter - burnin)
tightClustResult <- tightClustPam(dissimilarity, target=2, k.min=10)
getwd()
setwd("~/Desktop/BayesMP")
devtools::use_vignette("BayesMP")
WD <- '~/Desktop/BayesMP.github.io/data/mouseMetabolism/'
setwd(WD)
load('mouse.Rdata')
WD <- '~/Desktop/BayesMP.github.io/data/mouseMetabolism/'
setwd(WD)
load('~/Desktop/BayesMP.github.io/data/raw/mouse.Rdata')
sapply(DList,dim)
data_brown <- DList[[1]]
head(data_brown)
?grep
data_brown0 <- DList[[1]][,grep("b.wt|b.LCAD")]
data_brown0 <- DList[[1]]
data_brown1 <- data_brown0[,grep("b.wt|b.LCAD", colnames(data_brown0))]
dim(data_brown1)
head(data_brown1)
sapply(DList,dim)
data_brown0 <- DList[[1]]
data_brown1 <- data_brown0[,grep("b.wt|b.LCAD", colnames(data_brown0))]
rowMeans_brown <- rowMeans(data_brown1)
rowRanks_brown <- rank(rowMeans_brown)
data_heart0 <- DList[[2]]
data_heart1 <- data_heart0[,grep("b.wt|b.LCAD", colnames(data_heart0))]
rowMeans_heart <- rowMeans(data_heart1)
rowRanks_heart <- rank(rowMeans_heart)
data_liver0 <- DList[[3]]
data_liver1 <- data_liver0[,grep("b.wt|b.LCAD", colnames(data_liver0))]
rowMeans_liver <- rowMeans(data_liver1)
rowRanks_liver <- rank(rowMeans_liver)
sumRanks <- rowRanks_brown + rowRanks_heart + rowRanks_liver
sumRanks
filterIndex <- sumRanks > median(sumRanks, 0.5)
rank(1:10)
table(filterIndex)
data_brown <- data_brown1[filterIndex, ]
data_heart <- data_heart1[filterIndex, ]
data_liver <- data_liver1[filterIndex, ]
load('~/Desktop/BayesMP.github.io/data/raw/mouse.Rdata')
annotationFile = read.delim('~/Desktop/BayesMP.github.io/data/raw/GPL1261-56135.txt',skip=16)
names(annotationFile)
annoProbes = annotationFile$ID
annoGenes = annotationFile$Gene.Symbol
annoTitle = annotationFile$Gene.Title
annotationDF <- data.frame(probes=annotationFile$ID, genes=annotationFile$Gene.Symbol)
dim(annotationDF)
filterIndex
head(annotationDF)
annotationDF_filter <- annotationDF[match(names(filterIndex)[filterIndex], annotationDF$probes), ]
head(annotationDF_filter)
annotationDF_filter
annotationDF <- data.frame(probes=annotationFile$ID, genes=sapply(strsplit(annotationFile$Gene.Symbol,split=' /// '),function(x) x[1]) )
annotationFile$Gene.Symbol
options(stringsAsFactors = F)
WD <- '~/Desktop/BayesMP.github.io/data/mouseMetabolism/'
setwd(WD)
load('~/Desktop/BayesMP.github.io/data/raw/mouse.Rdata')
annotationFile = read.delim('~/Desktop/BayesMP.github.io/data/raw/GPL1261-56135.txt',skip=16)
annotationDF <- data.frame(probes=annotationFile$ID, genes=sapply(strsplit(annotationFile$Gene.Symbol,split=' /// '),function(x) x[1]) )
head(annotationDF)
data_brown0 <- DList[[1]]
data_brown1 <- data_brown0[,grep("b.wt|b.LCAD", colnames(data_brown0))]
rowMeans_brown <- rowMeans(data_brown1)
rowRanks_brown <- rank(rowMeans_brown)
data_heart0 <- DList[[2]]
data_heart1 <- data_heart0[,grep("b.wt|b.LCAD", colnames(data_heart0))]
rowMeans_heart <- rowMeans(data_heart1)
rowRanks_heart <- rank(rowMeans_heart)
data_liver0 <- DList[[3]]
data_liver1 <- data_liver0[,grep("b.wt|b.LCAD", colnames(data_liver0))]
rowMeans_liver <- rowMeans(data_liver1)
rowRanks_liver <- rank(rowMeans_liver)
sumRanks <- rowRanks_brown + rowRanks_heart + rowRanks_liver
filterIndex <- sumRanks > median(sumRanks, 0.5)
annotationDF_filter <- annotationDF[match(names(filterIndex)[filterIndex], annotationDF$probes), ]
head(annotationDF_filter)
data_brown <- data_brown1[filterIndex, ]
data_heart <- data_heart1[filterIndex, ]
data_liver <- data_liver1[filterIndex, ]
head(data_brown)
all(rownames(data_brown) == annotationDF_filter$probes)
all(rownames(data_brown) == annotationDF_filter$probes)
all(rownames(data_heart) == annotationDF_filter$probes)
all(rownames(data_liver) == annotationDF_filter$probes)
rownames(data_brown) <- annotationDF_filter$genes
rownames(data_heart) <- annotationDF_filter$genes
rownames(data_liver) <- annotationDF_filter$genes
head(data_brown)
head(data_heart)
data_brown <- data_brown1[filterIndex, ]
data_heart <- data_heart1[filterIndex, ]
data_liver <- data_liver1[filterIndex, ]
all(rownames(data_brown) == annotationDF_filter$probes)
all(rownames(data_heart) == annotationDF_filter$probes)
all(rownames(data_liver) == annotationDF_filter$probes)
rownames(data_brown) <- annotationDF_filter$genes
rownames(data_heart) <- annotationDF_filter$genes
rownames(data_liver) <- annotationDF_filter$genes
head(data_heart)
dim(data_heart1)
head(data_heart0)
head(data_heart)
options(stringsAsFactors = F)
WD <- '~/Desktop/BayesMP.github.io/data/mouseMetabolism/'
setwd(WD)
load('~/Desktop/BayesMP.github.io/data/raw/mouse.Rdata')
annotationFile <- read.delim('~/Desktop/BayesMP.github.io/data/raw/GPL1261-56135.txt',skip=16)
annotationDF <- data.frame(probes=annotationFile$ID, genes=sapply(strsplit(annotationFile$Gene.Symbol,split=' /// '),function(x) x[1]) )
data_brown0 <- DList[[1]]
data_brown1 <- data_brown0[,grep("wt|LCAD", colnames(data_brown0))]
rowMeans_brown <- rowMeans(data_brown1)
rowRanks_brown <- rank(rowMeans_brown)
data_heart0 <- DList[[2]]
data_heart1 <- data_heart0[,grep("wt|LCAD", colnames(data_heart0))]
rowMeans_heart <- rowMeans(data_heart1)
rowRanks_heart <- rank(rowMeans_heart)
data_liver0 <- DList[[3]]
data_liver1 <- data_liver0[,grep("wt|LCAD", colnames(data_liver0))]
rowMeans_liver <- rowMeans(data_liver1)
rowRanks_liver <- rank(rowMeans_liver)
sumRanks <- rowRanks_brown + rowRanks_heart + rowRanks_liver
filterIndex <- sumRanks > median(sumRanks, 0.5)
annotationDF_filter <- annotationDF[match(names(filterIndex)[filterIndex], annotationDF$probes), ]
data_brown <- data_brown1[filterIndex, ]
data_heart <- data_heart1[filterIndex, ]
data_liver <- data_liver1[filterIndex, ]
all(rownames(data_brown) == annotationDF_filter$probes)
all(rownames(data_heart) == annotationDF_filter$probes)
all(rownames(data_liver) == annotationDF_filter$probes)
rownames(data_brown) <- annotationDF_filter$genes
rownames(data_heart) <- annotationDF_filter$genes
rownames(data_liver) <- annotationDF_filter$genes
head(data_brown)
dim(data_brown)
data_brown0 <- DList[[1]]
data_brown1 <- data_brown0[,grep("b.wt|b.LCAD", colnames(data_brown0))]
rowMeans_brown <- rowMeans(data_brown1)
rowRanks_brown <- rank(rowMeans_brown)
data_heart0 <- DList[[2]]
data_heart1 <- data_heart0[,grep("h.wt|h.LCAD", colnames(data_heart0))]
rowMeans_heart <- rowMeans(data_heart1)
rowRanks_heart <- rank(rowMeans_heart)
data_liver0 <- DList[[3]]
data_liver1 <- data_liver0[,grep("l.wt|l.LCAD", colnames(data_liver0))]
rowMeans_liver <- rowMeans(data_liver1)
rowRanks_liver <- rank(rowMeans_liver)
sumRanks <- rowRanks_brown + rowRanks_heart + rowRanks_liver
filterIndex <- sumRanks > median(sumRanks, 0.5)
annotationDF_filter <- annotationDF[match(names(filterIndex)[filterIndex], annotationDF$probes), ]
data_brown <- data_brown1[filterIndex, ]
data_heart <- data_heart1[filterIndex, ]
data_liver <- data_liver1[filterIndex, ]
all(rownames(data_brown) == annotationDF_filter$probes)
all(rownames(data_heart) == annotationDF_filter$probes)
all(rownames(data_liver) == annotationDF_filter$probes)
rownames(data_brown) <- annotationDF_filter$genes
rownames(data_heart) <- annotationDF_filter$genes
rownames(data_liver) <- annotationDF_filter$genes
head(data_brown)
head(data_heart)
head(data_liver)
write.csv(data_brown, "data_brown.csv")
write.csv(data_brown, "data_brown.csv")
write.csv(data_heart, "data_heart.csv")
write.csv(data_liver, "data_liver.csv")
